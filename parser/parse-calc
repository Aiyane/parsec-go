package parser

func SetCalcParameters() {
	SetDelims("(", ")", "[", "]", "{", "}", ";", "`", ",")
	SetOperators("++", "--", "+", "-", "*", "/", "%", "~", "!")
	SetLineComment("//")
	SetQuotationMarks("\"", "'")
}

func op(s string) Combinator {
	return T["@="]("op", S["$$"](s))
}

var PostfixOperator = B["@or"](op("++"), op("--"))
var PrefixOperator = B["@or"](op("++"), op("--"), op("+"), op("-"), op("~"), op("!"))
var MultiplicativeOperator = B["@or"](op("*"), op("/"), op("%"))
var AdditiveOperator = B["@or"](op("+"), op("-"))

var Identifier = T["@="]("identifier",
	P["$pred"](func(node *Node) bool {
		return node.Type == TokenType && IsId(node.Text)
	}))
var Numeral = T["@="]("numeral",
	P["$pred"](func(node *Node) bool {
		return node.Type == TokenType && IsNumeral(node.Text)
	}))
var PrimaryExpression = B["@or"](Identifier, Numeral)
var PostfixExpression = B["@or"](
	F["@postfix"]("postfix", PrimaryExpression, PostfixOperator),
	PrimaryExpression,
)
var PrefixExpression = B["@or"](
	F["@prefix"]("prefix", PostfixExpression, PrefixOperator),
	PostfixExpression,
)
var UnaryExpression = PrefixExpression
var MultiplicativeExpression = B["@or"](
	F["@infix-left"]("binop", UnaryExpression, MultiplicativeOperator),
	UnaryExpression,
)
var AdditiveExpression = B["@or"](
	F["@infix-left"]("binop", MultiplicativeExpression, AdditiveOperator),
	MultiplicativeExpression,
)

func ParseCalc(s string) []*Node {
	SetCalcParameters()
	t, _ := Eval(AdditiveExpression, Scan(s))
	return t
}
